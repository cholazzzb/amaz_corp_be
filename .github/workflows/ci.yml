name: ci

on:
  push:
    branches: ["main"]

env:
  PROJECT_ID: "${{ secrets.PROJECT_ID }}"
  GAR_LOCATION: "${{ secrets.GAR_LOCATION }}" # Google Artifact Repository
  SERVICE: "${{ secrets.SERVICE }}"
  REGION: "${{ secrets.REGION }}" # Cloud Run

jobs:
  # test:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Setup up sqlc
  #       uses: sqlc-dev/setup-sqlc@v4
  #       with:
  #         sqlc-version: "1.19.1"

  #     - name: Codegen sqlc
  #       run: make gen-sql

  #     - name: Set up Go
  #       uses: actions/setup-go@v4
  #       with:
  #         go-version: "1.21"

  #     - name: Short test
  #       run: make test

  deploy:
    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: "read"
      id-token: "write"

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Google Auth
        id: auth
        uses: "google-github-actions/auth@v2"
        with:
          token_format: "access_token"
          service_account: "${{ secrets.SERVICE_ACCOUNT }}" # service account email
          workload_identity_provider: "${{ secrets.WIF_PROVIDER }}"

      # Authenticate Docker to Google Cloud Artifact Registry
      - name: Docker Auth
        id: docker-auth
        uses: "docker/login-action@v3"
        with:
          username: "oauth2accesstoken"
          password: "${{ steps.auth.outputs.access_token }}"
          registry: "${{ env.GAR_LOCATION }}-docker.pkg.dev"

      - name: Set up Cloud SDK
        uses: "google-github-actions/setup-gcloud@v1"

      - name: Configure Docker
        run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

      - name: Create env file
        run: |
          echo "${{ secrets.ENV_FILE }}" > .env
      
      - name: Create env test file
        run: |
          echo "${{ secrets.ENV_FILE_TEST }}" > .env.test

      - name: Setup up sqlc
        uses: sqlc-dev/setup-sqlc@v4
        with:
          sqlc-version: "1.19.1"

      - name: Codegen sqlc
        run: make gen-sql

      - name: Build and Push Container
        run: |-
          docker build --platform linux/amd64 -t ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ vars.IMAGE_NAME }} .
          docker tag ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ vars.IMAGE_NAME }} ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ vars.IMAGE_NAME }}:${{ vars.TAG_VERSION }}
          docker push ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ vars.IMAGE_NAME }}:${{ vars.TAG_VERSION }}

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ vars.IMAGE_NAME }}:${{ vars.TAG_VERSION }}

      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}

    # This workflow build and push a Docker container to Google Artifact Registry and deploy it on Cloud Run when a commit is pushed to the "main" branch
    #
    # Overview:
    #
    # 1. Authenticate to Google Cloud
    # 2. Authenticate Docker to Artifact Registry
    # 3. Build a docker container
    # 4. Publish it to Google Artifact Registry
    # 5. Deploy it to Cloud Run
    #
    # To configure this workflow:
    #
    # 1. Ensure the required Google Cloud APIs are enabled:
    #
    #    Cloud Run            run.googleapis.com
    #    Artifact Registry    artifactregistry.googleapis.com
    #
    # 2. Create and configure Workload Identity Federation for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
    #
    # 3. Ensure the required IAM permissions are granted
    #
    #    Cloud Run
    #      roles/run.admin
    #      roles/iam.serviceAccountUser     (to act as the Cloud Run runtime service account)
    #
    #    Artifact Registry
    #      roles/artifactregistry.admin     (project or repository level)
    #
    #    NOTE: You should always follow the principle of least privilege when assigning IAM roles
    #
    # 4. Create GitHub secrets for WIF_PROVIDER and WIF_SERVICE_ACCOUNT
    #
    # 5. Change the values for the GAR_LOCATION, SERVICE and REGION environment variables (below).
    #
    # NOTE: To use Google Container Registry instead, replace ${{ env.GAR_LOCATION }}-docker.pkg.dev with gcr.io
    #
    # For more support on how to run this workflow, please visit https://github.com/marketplace/actions/deploy-to-cloud-run
    #
    # Further reading:
    #   Cloud Run IAM permissions                 - https://cloud.google.com/run/docs/deploying
    #   Artifact Registry IAM permissions         - https://cloud.google.com/artifact-registry/docs/access-control#roles
    #   Container Registry vs Artifact Registry   - https://cloud.google.com/blog/products/application-development/understanding-artifact-registry-vs-container-registry
    #   Principle of least privilege              - https://cloud.google.com/blog/products/identity-security/dont-get-pwned-practicing-the-principle-of-least-privilege
