// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query.sql

package user

import (
	"context"
	"database/sql"
)

const createFriend = `-- name: CreateFriend :execresult
INSERT INTO friends(member1_id, member2_id)
VALUES (?, ?)
`

type CreateFriendParams struct {
	Member1ID string
	Member2ID string
}

func (q *Queries) CreateFriend(ctx context.Context, arg CreateFriendParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createFriend, arg.Member1ID, arg.Member2ID)
}

const createMember = `-- name: CreateMember :execresult
INSERT INTO members(id, name, status, user_id)
VALUES (?, ?, ?, ?)
`

type CreateMemberParams struct {
	ID     string
	Name   string
	Status string
	UserID string
}

func (q *Queries) CreateMember(ctx context.Context, arg CreateMemberParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createMember,
		arg.ID,
		arg.Name,
		arg.Status,
		arg.UserID,
	)
}

const createUser = `-- name: CreateUser :execresult
INSERT INTO users(id, username, password, salt)
VALUES (?, ?, ?, ?)
`

type CreateUserParams struct {
	ID       string
	Username string
	Password string
	Salt     string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.Username,
		arg.Password,
		arg.Salt,
	)
}

const getFriendsByMemberId = `-- name: GetFriendsByMemberId :many
SELECT m.id, m.name, m.status
FROM members m
JOIN friends f ON (m.id = f.member1_id OR m.id = f.member2_id)
WHERE (f.member1_id = ? OR f.member2_id = ?) AND m.id != ?
LIMIT 10
`

type GetFriendsByMemberIdParams struct {
	Member1ID string
	Member2ID string
	ID        string
}

type GetFriendsByMemberIdRow struct {
	ID     string
	Name   string
	Status string
}

func (q *Queries) GetFriendsByMemberId(ctx context.Context, arg GetFriendsByMemberIdParams) ([]GetFriendsByMemberIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getFriendsByMemberId, arg.Member1ID, arg.Member2ID, arg.ID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFriendsByMemberIdRow
	for rows.Next() {
		var i GetFriendsByMemberIdRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Status); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMemberByName = `-- name: GetMemberByName :one
SELECT id, user_id, name, status, room_id
FROM members
WHERE name = ?
LIMIT 1
`

func (q *Queries) GetMemberByName(ctx context.Context, name string) (Member, error) {
	row := q.db.QueryRowContext(ctx, getMemberByName, name)
	var i Member
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Status,
		&i.RoomID,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, password, salt
FROM users
WHERE username = ?
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Salt,
	)
	return i, err
}

const getUserExistance = `-- name: GetUserExistance :one
SELECT EXISTS(SELECT id, username, password, salt
FROM users
WHERE username = ?
LIMIT 1)
`

func (q *Queries) GetUserExistance(ctx context.Context, username string) (bool, error) {
	row := q.db.QueryRowContext(ctx, getUserExistance, username)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
