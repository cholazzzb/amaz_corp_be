// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: postgresql.sql

package userpostgres

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO users(id, username, password, salt)
VALUES ($1, $2, $3, $4)
`

type CreateUserParams struct {
	ID       string
	Username string
	Password string
	Salt     string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.Username,
		arg.Password,
		arg.Salt,
	)
}

const getUser = `-- name: GetUser :one
SELECT id, username, password, salt
FROM users
WHERE username = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Salt,
	)
	return i, err
}

const getUserExistance = `-- name: GetUserExistance :one
SELECT EXISTS(
    SELECT id, username, password, salt
    FROM users
    WHERE username = $1
    LIMIT 1
)
`

func (q *Queries) GetUserExistance(ctx context.Context, username string) (bool, error) {
	row := q.db.QueryRowContext(ctx, getUserExistance, username)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
