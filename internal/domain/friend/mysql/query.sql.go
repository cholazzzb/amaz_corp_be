// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: query.sql

package friend

import (
	"context"
	"database/sql"
)

const createFriend = `-- name: CreateFriend :execresult
INSERT INTO friends(member1_id, member2_id)
VALUES (?, ?)
`

type CreateFriendParams struct {
	Member1ID int64
	Member2ID int64
}

func (q *Queries) CreateFriend(ctx context.Context, arg CreateFriendParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createFriend, arg.Member1ID, arg.Member2ID)
}

const getFriendsByMemberId = `-- name: GetFriendsByMemberId :many
SELECT member1_id, member2_id
FROM friends
WHERE member1_id = ?
    OR member2_id = ?
LIMIT 10
`

type GetFriendsByMemberIdParams struct {
	Member1ID int64
	Member2ID int64
}

func (q *Queries) GetFriendsByMemberId(ctx context.Context, arg GetFriendsByMemberIdParams) ([]Friend, error) {
	rows, err := q.db.QueryContext(ctx, getFriendsByMemberId, arg.Member1ID, arg.Member2ID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Friend
	for rows.Next() {
		var i Friend
		if err := rows.Scan(&i.Member1ID, &i.Member2ID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
