// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: query.sql

package friend

import (
	"context"
	"database/sql"
)

const createFriend = `-- name: CreateFriend :execresult
INSERT INTO friends(member1_id, member2_id)
VALUES (?, ?)
`

type CreateFriendParams struct {
	Member1ID int64
	Member2ID int64
}

func (q *Queries) CreateFriend(ctx context.Context, arg CreateFriendParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createFriend, arg.Member1ID, arg.Member2ID)
}

const getFriendsByMemberId = `-- name: GetFriendsByMemberId :many
SELECT m.id, m.name, m.status
FROM members m
JOIN friends f ON (m.id = f.member1_id OR m.id = f.member2_id)
WHERE (f.member1_id = ? OR f.member2_id = ?) AND m.id != ?
LIMIT 10
`

type GetFriendsByMemberIdParams struct {
	Member1ID int64
	Member2ID int64
	ID        int64
}

type GetFriendsByMemberIdRow struct {
	ID     int64
	Name   string
	Status string
}

func (q *Queries) GetFriendsByMemberId(ctx context.Context, arg GetFriendsByMemberIdParams) ([]GetFriendsByMemberIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getFriendsByMemberId, arg.Member1ID, arg.Member2ID, arg.ID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFriendsByMemberIdRow
	for rows.Next() {
		var i GetFriendsByMemberIdRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Status); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
